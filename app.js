import express, { json } from 'express';
import { exec } from 'child_process';
import fs from 'fs';
import crypto from 'crypto';
import path from "path"
import axios from "axios"
import FormData from "form-data"
import { DOMParser } from '@xmldom/xmldom'
const PORT = 5000;

import dotenv from "dotenv"
dotenv.config()

// REPLACE BEFORE COMMITING TO GITHUB
const API_KEY = process.env.ROBLOX_API_KEY
const RHolder = parseInt(process.env.RBX_RESOURCE_HOLDER)
const RHolderType = process.env.RBX_RESOURCE_HOLDER_TYPE

// console.log(API_KEY == undefined, RHolder == undefined, RHolderType == undefined)
if(API_KEY == undefined || RHolder == undefined || RHolderType == undefined){
    throw new Error("Missing required ENV variables ROBLOX_API_KEY:"+(API_KEY == undefined?"missing":"found")+" RBX_RESOURCE_HOLDER:"+(process.env.RBX_RESOURCE_HOLDER == undefined?"missing":"found")+" RBX_RESOURCE_HOLDER_TYPE:"+(RHolderType == undefined?"missing":"found"))
}

const app = express();
const __dirname = path.resolve(path.dirname('')).replaceAll("\\","/") 

// Middleware to check for X-Server-Auth header
app.use((req, res, next) => {
    const authHeader = req.headers['x-server-auth'];
    const expectedAuthValue = 'DDX_09323103955323128370';
    
    if (authHeader !== expectedAuthValue) {
        return res.status(403).json({ error: 'Unauthorized' });
    }
    next();
});

app.use(json());

// Generate route to execute a command
app.post('/generate', (req, res) => {
    // Validate the body
    if(!(req.body.save_data instanceof Object)){
        return res.status(400).json({ error: 'Invalid type for "save_data" body field. An "Object" type was expected.' });
    }
    if(!(typeof req.body.uploader == "number")){
        return res.status(400).json({ error: 'Invalid type for "uploader" body field. A "Number" type was expected.' });
    }

    let id = "thum_"+crypto.randomUUID()
    id = id.substring(0,id.indexOf("-")) 
    // Write the save data to an input file
    
    const inputFilePath = __dirname + "/Blender3.3/input/"+id+".json" 
    const outputFilePath = __dirname + "/Blender3.3/output/"+id+".png"
    const projectFilePath = __dirname + "/ThumbnailRanderer.blend"
    const scriptFilePath = __dirname + "/RenderThumbnail.py"

    fs.writeFileSync(inputFilePath, JSON.stringify(req.body.save_data),{ flag: 'w+' })
       
    // Generate thumbnail
    const command = 'blender --background '+projectFilePath+' --python '+scriptFilePath+' -- input/'+id+'.json '+id+'.png'; // Replace with your command

    exec(command,
    //     {
    //     cwd: 'Blender3.3'
    //   },
      {
        cwd: '/usr/src/app/blender-3.3.0-linux-x64/blender'
      },
      (error, stdout, stderr) => {
        if (error) {
            return res.status(500).json({ error: stderr });
        }

        // Upload the asset to Roblox as a decal
        const upload = uploadAsset(__dirname+"/Blender3.3/output/"+id+".png", req.body.uploader)
        upload.catch(error=>{
            console.log(error);
            res.status(500).json({ error: error });
        })
        upload.then((imageid)=>{
            res.status(200).json({ image_id: imageid });
        })
        upload.finally(()=>{
            fs.unlink(inputFilePath, (excep)=>{
                if(excep){
                    console.error("Error removing input file: ", excep)
                }
            })
            fs.unlink(outputFilePath, (excep)=>{
                if(excep){
                    console.error("Error removing output file: ", excep)
                }
            })
        })
    });

});

app.get('/ping', (req, res) => {
    return res.status(200).send("pong")
});

// Start the server
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});


async function uploadAsset(filePath, uploader) {
    return new Promise(async (resolve, reject) => {
        try {
            // Create form data
            const form = new FormData();
            const requestData = {
                assetType: "Decal",
                displayName: "UGM_Thumbnail", // Your asset name
                description: "This is an asset generated by the user '"+String(uploader)+"' during an automatic thumbnail generation process. The upload of this asset was performed programatically. Generated content is only visible to the player that generated it therefore not posing as a moderation risk.", // Your asset description
                creationContext: {
                    creator: {
                        [RHolderType.toLowerCase() +"Id"]: RHolder
                    }
                }
            };
    
            // Append the JSON request and file to the form
            form.append('request', JSON.stringify(requestData));
            form.append('fileContent', fs.createReadStream(filePath), {
                filename: 'UGM_Thumbnail.png', // Name of the uploaded file
                contentType: 'image/png' // Content type of the file
            });
    
            // Make the POST request to the Roblox Asset API
            console.log("Sending POST:FormData -> "+"https://apis.roblox.com/assets/v1/assets")
            const response = await axios.post('https://apis.roblox.com/assets/v1/assets', form, {
                headers: {
                    ...form.getHeaders(),
                    'x-api-key': API_KEY // Set the API key in headers
                },
            }).catch(reject);
            console.log('Decal uploaded successfully');
            const operationResponse = await poll_operation(response.data.operationId, 8).catch(reject)
            if(operationResponse.response){
                // Get the image ID of the Decal asset
                console.log("Sending GET -> "+"https://assetdelivery.roblox.com/v1/asset/?id="+operationResponse.response.assetId)
                const assetDeliveryResponse = await axios.get("https://assetdelivery.roblox.com/v1/asset/?id="+operationResponse.response.assetId, {
                    headers: {
                        'x-api-key': API_KEY // Set the API key in headers
                    },
                }).catch(reject);       
                const parser = new DOMParser();    
                const xml =  parser.parseFromString(assetDeliveryResponse.data, 'text/xml');
    
                let value = xml.getElementsByTagName("url")[0].firstChild.textContent;
                value = value.substring(value.indexOf("id=")+3, value.length)
    
                resolve(value)
            }else{
                reject(new Error("OperationError: "+JSON.stringify(operationResponse)))
            }
    
        } catch (error) {
            reject(new Error('Error uploading asset: '+error))
        }
    })
}

async function poll_operation(operationID, maxtimes=1){
    return new Promise((resolve, reject) => {
        if(maxtimes == 0) return reject(new Error("PollingTimedout"))
        setTimeout(function(){
            console.log("Sending GET -> "+"https://apis.roblox.com/assets/v1/operations/"+operationID)
            axios.get("https://apis.roblox.com/assets/v1/operations/"+operationID, {
                headers: {
                    'x-api-key': API_KEY // Set the API key in headers
                },
            }).then(operationResponse=>{
                if(operationResponse.data.done){
                    return resolve(operationResponse.data)
                }
    
                poll_operation(operationID, maxtimes-1).then(resolve)
            }).catch(reject);
        }, 1000)
    })
}